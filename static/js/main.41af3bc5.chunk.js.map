{"version":3,"sources":["components/Loader/Loader.tsx","utils/fetchClient.ts","components/PostsList.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["Loader","className","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","PostsList","selectedUser","posts","isPostsLoading","selectedPost","onSetPosts","onLoadPosts","onSelectPost","onError","useEffect","id","catch","error","finally","length","map","post","title","type","classNames","onClick","current","handleSelectPost","NewCommentForm","postId","errors","onSetComments","useState","isFormSubmit","setIsFormSubmit","hasEmptyField","setHasEmptyField","email","name","formData","setFormData","handleUpdateInfo","e","target","value","onSubmit","preventDefault","Object","values","some","f","trim","res","newComment","htmlFor","placeholder","onChange","PostDetails","comments","setComments","isCommentsLoading","setIsCommentsLoading","isAddComment","setIsAddComment","commentBody","commentId","href","filter","comment","UserSelector","onSelectUser","users","setUsers","isDropdownVisible","setIsDropdownVisible","dropdownRef","useRef","handleDropdown","ref","onBlur","contains","relatedTarget","role","user","handleSelectUser","App","setSelectedUser","setSelectedPost","setIsPostsLoading","setPosts","setErrors","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.41af3bc5.chunk.js","sourcesContent":["import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useEffect } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from './Loader';\n\nimport { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Error } from '../types/Error';\n\ntype Props = {\n  selectedUser: User,\n  posts: Post[],\n  isPostsLoading: boolean,\n  onSetPosts: (posts: Post[]) => void,\n  onLoadPosts: (isLoad: boolean) => void,\n  onSelectPost: React.Dispatch<React.SetStateAction<Post | null>>;\n  selectedPost: Post | null,\n  onError: (error: (prevError: Error) => Error) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUser,\n  posts,\n  isPostsLoading,\n  selectedPost,\n  onSetPosts,\n  onLoadPosts,\n  onSelectPost,\n  onError,\n}) => {\n  useEffect(() => {\n    onLoadPosts(false);\n\n    client.get<Post[]>(`/posts?userId=${selectedUser.id}`)\n      .then(onSetPosts)\n      .catch(() => {\n        onError((error) => ({\n          ...error,\n          posts: true,\n        }));\n      })\n      .finally(() => onLoadPosts(true));\n  }, [selectedUser.id]);\n\n  const handleSelectPost = (post: Post) => {\n    onSelectPost((current) => (\n      current?.id === post.id ? null : post\n    ));\n  };\n\n  if (!isPostsLoading) {\n    return <Loader />;\n  }\n\n  if (!posts.length && isPostsLoading) {\n    return null;\n  }\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post) => {\n            const { id, title } = post;\n\n            return (\n              <tr key={post.id} data-cy=\"Post\">\n                <td data-cy=\"PostId\">{id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames('button is-link', {\n                      'is-light': selectedPost?.id !== id,\n                    })}\n                    onClick={() => handleSelectPost(post)}\n                  >\n                    {selectedPost?.id === id ? 'Close' : 'Open'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\nimport { Error } from '../types/Error';\n\ninterface FormData {\n  email: string,\n  name: string,\n  body: string,\n}\n\ntype Props = {\n  postId: number,\n  errors: Error,\n  onError: (error: (prevError: Error) => Error) => void,\n  onSetComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  errors,\n  onSetComments,\n  onError,\n}) => {\n  const [isFormSubmit, setIsFormSubmit] = useState(false);\n  const [hasEmptyField, setHasEmptyField] = useState(false);\n  const [formData, setFormData] = useState<FormData>({\n    email: '',\n    name: '',\n    body: '',\n  });\n\n  const handleUpdateInfo = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = e.target;\n\n    setFormData((current) => ({\n      ...current,\n      [name]: value,\n    }));\n  };\n\n  const handleReset = () => {\n    setFormData({\n      body: '',\n      name: '',\n      email: '',\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (Object.values(formData).some(f => !f.trim())) {\n      setHasEmptyField(true);\n\n      return;\n    }\n\n    setIsFormSubmit(true);\n    setHasEmptyField(false);\n\n    const data = {\n      ...formData,\n      postId,\n    };\n\n    client.post<Comment>('/comments', data)\n      .then((res) => onSetComments(current => ([\n        ...current,\n        res,\n      ])))\n      .catch(() => onError(error => ({\n        ...error,\n        newComment: true,\n      })))\n      .finally(() => setIsFormSubmit(false));\n\n    setFormData((current => ({\n      ...current,\n      body: '',\n    })));\n  };\n\n  const { name, body, email } = formData;\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmit}>\n      <div className=\"field\" data-cy=\"NameField\">\n        {errors.newComment && (\n          <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n            Something went wrong\n          </div>\n        )}\n\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': !name && hasEmptyField,\n            })}\n            onChange={handleUpdateInfo}\n            value={name}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {!name && hasEmptyField && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!name && hasEmptyField && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': !email && hasEmptyField,\n            })}\n            onChange={handleUpdateInfo}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {!email && hasEmptyField && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!email && hasEmptyField && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            value={body}\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': !body && hasEmptyField,\n            })}\n            onChange={handleUpdateInfo}\n          />\n        </div>\n\n        {!body && hasEmptyField && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isFormSubmit,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\nimport { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { Error } from '../types/Error';\n\ntype Props = {\n  selectedPost: Post;\n  errors: Error;\n  onError: (error: (prevError: Error) => Error) => void;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  errors,\n  onError,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isCommentsLoading, setIsCommentsLoading] = useState(false);\n  const [isAddComment, setIsAddComment] = useState(false);\n\n  useEffect(() => {\n    setIsCommentsLoading(true);\n\n    client.get<Comment[]>(`/comments?postId=${selectedPost.id}`)\n      .then(setComments)\n      .catch(() => onError(error => ({\n        ...error,\n        comments: true,\n      })))\n      .finally(() => setIsCommentsLoading(false));\n\n    return () => {\n      setIsAddComment(false);\n    };\n  }, [selectedPost.id]);\n\n  const handleDeleteComment = (id: number) => {\n    client.delete(`/comments/${id}`);\n    setComments((current) => (\n      current.filter(comment => comment.id !== id)\n    ));\n  };\n\n  if (isCommentsLoading) {\n    return <Loader />;\n  }\n\n  const { id: postId, title, body } = selectedPost;\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${postId}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n\n          {errors.comments && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!isCommentsLoading && !comments.length && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          <p className=\"title is-4\">Comments:</p>\n\n          {comments.map(({\n            name,\n            email,\n            body: commentBody,\n            id: commentId,\n          }) => (\n            <article\n              key={commentId}\n              className=\"message is-small\"\n              data-cy=\"Comment\"\n            >\n              <div className=\"message-header\">\n                <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                  {name}\n                </a>\n                <button\n                  data-cy=\"CommentDelete\"\n                  type=\"button\"\n                  className=\"delete is-small\"\n                  aria-label=\"delete\"\n                  onClick={() => handleDeleteComment(commentId)}\n                >\n                  delete button\n                </button>\n              </div>\n\n              <div className=\"message-body\" data-cy=\"CommentBody\">\n                {commentBody}\n              </div>\n            </article>\n          ))}\n\n          {isAddComment ? (\n            <NewCommentForm\n              postId={postId}\n              errors={errors}\n              onSetComments={setComments}\n              onError={onError}\n            />\n          ) : (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => setIsAddComment(true)}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from './Loader';\n\nimport { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\nimport { Error } from '../types/Error';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  selectedUser: User | null,\n  onSelectUser: (user: User) => void,\n  onSelectPost: (post: Post | null) => void,\n  onError: (error: (prevError: Error) => Error) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  selectedUser,\n  onSelectUser,\n  onSelectPost,\n  onError,\n}) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isDropdownVisible, setIsDropdownVisible] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    client.get<User[]>('/users')\n      .then(setUsers)\n      .catch(() => {\n        onError(error => ({\n          ...error,\n          users: true,\n        }));\n      });\n  }, []);\n\n  const handleDropdown = () => {\n    setIsDropdownVisible((current) => !current);\n  };\n\n  const handleSelectUser = (user: User) => {\n    onSelectUser(user);\n    onSelectPost(null);\n    handleDropdown();\n  };\n\n  const handleBlur = (e: React.FocusEvent) => {\n    const { current } = dropdownRef;\n\n    if (current && !current.contains(e.relatedTarget)) {\n      setIsDropdownVisible(false);\n    }\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isDropdownVisible,\n      })}\n      ref={dropdownRef}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleDropdown}\n          onBlur={handleBlur}\n        >\n          <span>\n            {selectedUser ? selectedUser.name : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {!users.length ? (\n            <Loader />\n          ) : (\n            users?.map(user => {\n              const { id, name } = user;\n\n              return (\n                <a\n                  key={id}\n                  href={`#user-${id}`}\n                  onClick={() => handleSelectUser(user)}\n                  className={classNames('dropdown-item', {\n                    'is-active': selectedUser?.id === id,\n                  })}\n                >\n                  {name}\n                </a>\n              );\n            })\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { User } from './types/User';\nimport { Error } from './types/Error';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isPostsLoading, setIsPostsLoading] = useState(false);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [errors, setErrors] = useState<Error>({\n    users: false,\n    posts: false,\n    comments: false,\n    newComment: false,\n  });\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  selectedUser={selectedUser}\n                  onSelectUser={setSelectedUser}\n                  onSelectPost={setSelectedPost}\n                  onError={setErrors}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {errors.users && (\n                  <div className=\"notification is-danger\">\n                    There are no users on the server\n                  </div>\n                )}\n\n                {errors.posts && selectedUser?.id && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {!posts.length && selectedUser && isPostsLoading && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {selectedUser && (\n                  <PostsList\n                    selectedUser={selectedUser}\n                    posts={posts}\n                    isPostsLoading={isPostsLoading}\n                    selectedPost={selectedPost}\n                    onLoadPosts={setIsPostsLoading}\n                    onSelectPost={setSelectedPost}\n                    onSetPosts={setPosts}\n                    onError={setErrors}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                  errors={errors}\n                  onError={setErrors}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}